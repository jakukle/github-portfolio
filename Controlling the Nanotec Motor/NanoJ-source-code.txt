// In this NanoJ program, we will make the motor turn.
// The language used for NanoJ programs is C, with a few specific extensions,
// like the mappings.

// You can map frequently used objects to be able to read or write them
// using In.* and Out.*. Here we map the object 6041:00 as "In.StatusWord".
map U16 StatusWord as input 0x6041:00
map U32 InputyPLC as input 0x60FD:00
//bool Wejscie1;

// Include the definition of NanoJ functions and symbols
#include "wrapper.h"

// The user() function is the entry point of the NanoJ program. It is called
// by the firmware of the controller when the NanoJ program is started.
void user()
{
	// Set mode "Profile velocity"
	od_write(0x6060, 0x00, 3);
	
	od_write(0x3240, 0x06, 15); //Ustawienie wejsc cyfrowych na 24V

	// Remember target velocity before overwriting, so we can reset it later.
	U32 targetVelocity = od_read(0x60FF, 0x00);
	
	U32 AnalogInput = od_read(0x3320, 0x01); 
	
	while (1) { 
		
		if ((In.InputyPLC & (1<<16)) != 0) {
		//od_write(In.StatusWord & (1<<7), 0);
		od_write(0x6040, 0x00, 0x80);
			while ( (In.StatusWord & 0xEF) != 0x40) {
					yield();
			}
		//od_write(0x2291, 0x04, 2 lub 0);
		}	
			
		//Request state "Ready to switch on"
		od_write(0x6040, 0x00, 0x6);
	
		// Wait until the requested state is reached
		while ( (In.StatusWord & 0xEF) != 0x21) {
			yield(); // Wait for the next cycle (1ms)
		}
		sleep(2000);
		
		//Request the state "Switched on"
		od_write(0x6040, 0x00, 0x7);
	
		// Wait until the requested state is reached
		while ( (In.StatusWord & 0xEF) != 0x23) {
			yield();
		}
		sleep(2000);
		
		//2291.4 i 60fd.0
		if ((In.InputyPLC == 327680)) {
		od_write(0x60FF, 0x00, 300);
		//od_write(0x60FE, 0x01, 0x00CB0000); // TO SA DIGITAL OUTPUTY
		}
		
		//Request the state "Operation enabled"
		od_write(0x6040, 0x00, 0xF);
	
		// Wait until the requested state is reached
		while ( (In.StatusWord & 0xEF) != 0x27) {
			yield();
		}
		
		// Let the motor run for a while
		sleep(2000); //bylo 1000
	
		// Set the target velocity 
		od_write(0x60FF, 0x00, 200); //bylo -50
	
		// Let the motor run for a while
		sleep(1000); //bylo 1000
			
		while (AnalogInput < 1000 and AnalogInput > 100) {
		AnalogInput = od_read(0x3320, 0x01);
		od_write(0x60FF, 0x00, 2*AnalogInput);
		sleep(1000);
		}
	
		// Stop the motor
		od_write(0x6040, 0x00, 0x0);
		sleep(2000);
	}
	// Reset the target velocity to its previous value
	od_write(0x60FF, 0x00, targetVelocity);
	
	// Stop the NanoJ program. Without this line, the firmware would call user() again as soon as we return.
	od_write(0x2300, 0x00, 0x0);
	
}